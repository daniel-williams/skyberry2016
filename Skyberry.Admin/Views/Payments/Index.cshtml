@model Skyberry.Admin.ViewModels.PaymentListVM

@using PagedList.Mvc;
@using PagedList;
@{
    Layout = "~/Views/Shared/_Admin.cshtml";
    ViewBag.Title = "Payment List";
    string sortby = "";
}

<h2>Payment List</h2>
<hr />

<p>
    @Html.ActionLink("Create New", "Create")
</p>

<div id="grid-filters">
    <form action="@Url.Action("Index", "Payments")" method="get" name="frm" id="frm">
        <input type="hidden" name="Sort" value="@Model.PageSortCriteria.Sort" />
        <input type="hidden" name="Page" value="1" />

        <h4>Filters</h4>
        <div>
            <label for="Amount">Amount</label>
            <input type="text" name="Amount" id="Amount" value="@Model.SearchCriteria.Amount" />
        </div>
        <div>
            <label for="PaymentType">Payment Type</label>
            <input type="text" name="PaymentType" id="PaymentType" value="@Model.SearchCriteria.PaymentType" />
        </div>
        <div style="margin-top:10px;"><button type="submit" class="btn btn-default">Update</button></div>
    </form>
</div>

<div class="pager-div">
    @if (Model.Payments.GetMetaData().PageCount > 1)
    {
        @Html.PagedListPager((IPagedList)Model.Payments, page => Url.Action("Index", "Payments", new { page = page, sort = Model.PageSortCriteria.Sort, amount = Model.SearchCriteria.Amount, paymentType = Model.SearchCriteria.PaymentType }), PagedListRenderOptions.OnlyShowFivePagesAtATime)
    }
</div>

<table id="tbl-grid-payment" class="tbl-grid hl pad-full">
    <tr>
        <th class="c1">
            @{
                sortby = "Account.Name";
            }
            <a href="@Url.Action("Index", "Payments", new { page = Model.PageSortCriteria.Page, sort = Model.PageSortCriteria.SortToogle(sortby), amount = Model.SearchCriteria.Amount, paymentType = Model.SearchCriteria.PaymentType })">Account<span class="sort @Model.PageSortCriteria.SortCss(sortby)"></span></a>
        </th>
        <th class="c2">
            @{
                sortby = "Amount";
            }
            <a href="@Url.Action("Index", "Payments", new { page = Model.PageSortCriteria.Page, sort = Model.PageSortCriteria.SortToogle(sortby), amount = Model.SearchCriteria.Amount, paymentType = Model.SearchCriteria.PaymentType })">Amount<span class="sort @Model.PageSortCriteria.SortCss(sortby)"></span></a>
        </th>
        <th class="c3">
            @{
                sortby = "PaymentType";
            }
            <a href="@Url.Action("Index", "Payments", new { page = Model.PageSortCriteria.Page, sort = Model.PageSortCriteria.SortToogle(sortby), amount = Model.SearchCriteria.Amount, paymentType = Model.SearchCriteria.PaymentType })">Type<span class="sort @Model.PageSortCriteria.SortCss(sortby)"></span></a>
        </th>
        <th class="c4">
            @{
                sortby = "PaymentDate";
            }
            <a href="@Url.Action("Index", "Payments", new { page = Model.PageSortCriteria.Page, sort = Model.PageSortCriteria.SortToogle(sortby), amount = Model.SearchCriteria.Amount, paymentType = Model.SearchCriteria.PaymentType })">Payment Date<span class="sort @Model.PageSortCriteria.SortCss(sortby)"></span></a>
        </th>
        <th class="c5"></th>
    </tr>

    @foreach (var item in Model.Payments)
    {
        <tr>
            <td class="c1">
                @Html.DisplayFor(modelItem => item.Account.Name)
            </td>
            <td class="c2">
                @Html.DisplayFor(modelItem => item.Amount)
            </td>
            <td class="c3">
                @Html.DisplayFor(modelItem => item.PaymentType)
            </td>
            <td class="c4">
                @(item.PaymentDate.HasValue ? item.PaymentDate.Value.Date.ToString("M/dd/yyy") : "")
            </td>
            <td class="c5">
                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            </td>
        </tr>
    }

</table>

<div class="pager-div">
    @if (Model.Payments.GetMetaData().PageCount > 1)
    {
        @Html.PagedListPager((IPagedList)Model.Payments, page => Url.Action("Index", "Payments", new { page = page, sort = Model.PageSortCriteria.Sort, amount = Model.SearchCriteria.Amount, paymentType = Model.SearchCriteria.PaymentType }), PagedListRenderOptions.OnlyShowFivePagesAtATime)
    }
</div>
